# Testing CICD Pipeline for Testing
trigger:
  branches:
    include:
      #- main
      #- master
      - release/*

pool:
  vmImage: "ubuntu-latest"
  container: shiftleft/sast-scan:latest


variables:
#  - group: angular-app-vars
  webappname : 'angularApp'

stages:
  - stage: 'PreDeployment'
    displayName: 'Security Code Analysis'
    jobs:
      - job: risk_report
        displayName: 'Risk Report'
        pool:
          vmImage: "ubuntu-latest"
        steps:
        - template: ci/WhiteSource.yml             
      
      #- job: 'Snyk_Scan'
      #  displayName: 'Snyk Report'
      #  steps:
      #  - template: ci/Snyk.yml
  
      #- job: 'Gitleak_Scan'
      #  displayName: 'Gitleak Report'
      #  steps:
      #  - template: ci/gitleak.yml
        
      #- job: 'WebGoat_Test'
      #  displayName: 'WebGoat Stats'
      #  steps:
      #  - template: ci/WebGoat.yml
      
      #- job: 'lint_tests'
      #  displayName: 'super-linter validation'
      #  steps:
      #  - template: ci/linter.yml
  
  - stage: 'Build_Artifact'
    displayName: 'Building The Artifact'
    jobs:
      - job: 'Building_Artifact'
        displayName: 'Building The Artifact'
        steps:
        - template: ci/npm-ci.yml
      
      #- job: 'OWASP_Scan'
      #  displayName: 'OWASP Dependency Check scan of third-party dependencies'
      #  steps:
      #  - template: ci/owasp.yml
  
  - stage: 'Post_Build_Scan'
    displayName: 'Post Build Scan'
    dependsOn: 'Build_Artifact'
    condition: succeeded('Build_Artifact')
    jobs:
      - job: 'OWASP_Scan'
        displayName: 'OWASP Dependency Check scan of third-party dependencies'
        steps:
        - template: ci/owasp.yml
  
  - stage: 'Build_Validation'
    displayName: 'External Validation'
    dependsOn: 'Build_Artifact'
    condition: succeeded('Build_Artifact')
    jobs:
      - job: waitForValidation
        displayName: 'Wait for external validation'
        pool: 'server'
        timeoutInMinutes: 4320 # job times out in 3 days  
        steps:
        - template: cd/validation.yml      
  
  - stage: 'Deploy_to_Dev'
    displayName: 'Dev Environment'
    dependsOn: 'Build_Artifact'
    #condition: succeeded('Build_Validation')
    jobs:
    - deployment: 'Deploy_Artifact_To_Dev'
      displayName: 'Deploy_Artifact To Dev'
      #environment: 'Dev'
      environment:
        name: 'Dev'
        resourceType: 'VirtualMachine'
      #resourceType: VirtualMachine
      pool: 
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
             steps:
             #- template: cd/dev.yml
               - task: DownloadPipelineArtifact@2
                 inputs:
                   runVersion: 'latest'
                   downloadPath: '$(System.DefaultWorkingDirectory)'
                   #targetPath: '$(System.DefaultWorkingDirectory)/$(webappname).zip'
                   targetPath: '$(Pipeline.Workspace)'
             
  - stage: 'Deploy_to_QA'
    displayName: 'QA Environment'
    dependsOn: 'Deploy_to_Dev'
    condition: succeeded('Deploy_to_Dev')
    jobs:
    - deployment: 'Deploy_Artifact_To_QA'
      displayName: 'Deploy_Artifact To QA'
      environment: 'QA'
      pool: 
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
             steps:
             - template: cd/QA.yml
             
  - stage: 'Deploy_to_Staging'
    displayName: 'Staging Environment'
    dependsOn: 'Deploy_to_QA'
    condition: succeeded('Deploy_to_QA')
    jobs:
    - deployment: 'Deploy_Artifact_To_Staging'
      displayName: 'Deploy_Artifact To Staging'
      environment: 'Staging'
      pool: 
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
             steps:
             - template: cd/Stg.yml
             
  - stage: 'Deploy_to_Prod'
    displayName: 'Prod Environment'
    dependsOn: 'Deploy_to_Staging'
    condition: succeeded('Deploy_to_Staging')
    jobs:
    - deployment: 'Deploy_Artifact_To_Prod'
      displayName: 'Deploy_Artifact To Prod'
      environment: 'Production'
      pool: 
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
             steps:
             - template: cd/Prod.yml           
